name: CI/CD Pipeline

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 'latest'

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false

      - name: Terraform Init
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform init
  
      # Added Terraform validation to ensure the code is valid
      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      # Added Terraform format check to ensure consistent formatting
      - name: Terraform Format Check
        working-directory: infra
        run: terraform fmt -check
        
      - name: Terraform Plan
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve tfplan

      - name: Wait and Get Public IP
        id: get_ip
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          IP=$(terraform output -raw public_ip | grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' | head -n 1)
          echo "Debug: Retrieved IP value is $IP"
          echo "public_ip=$IP" >> $GITHUB_ENV
          echo "public_ip"
          # echo "::set-output name=public_ip::$IP"
          echo "::set-output name=public_ip::$IP"  # Sets as step-level output for compatibility
 
  ansible_deploy:
    name: Run Ansible Playbook
    runs-on: ubuntu-latest
    needs: terraform_apply
    outputs:
      timestamp: ${{ steps.extract_timestamp.outputs.timestamp }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Ansible and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass
      - name: Set Up SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug Public IP
        run: |
          echo "Public IP from terraform_apply:"
          echo ${{ needs.terraform_apply.outputs.public_ip }} 
      - name: Create Ansible Inventory
        run: |
          mkdir -p ansible
          echo "[web]" > ansible/hosts.ini
          echo "${{ needs.terraform_apply.outputs.public_ip }} ansible_user=azureuser" >> ansible/hosts.ini
          cat ansible/hosts.ini  # Print inventory for debugging
      # Added Ansible lint check for playbook validation
      # - name: Install Ansible Lint
      #   run: |
      #     pip install ansible-lint
      # - name: Lint Ansible Playbook
      #   run: ansible-lint ansible/deploy.yml
      - name: Run Ansible Playbook
        id: ansible_run
        run: |
          ansible-playbook -i ansible/hosts.ini ansible/deploy.yml \
          -e "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" \
          -e "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" \
          | tee ansible_output.log
        env:
          ANSIBLE_HOST_KEY_CHECKING: false

      - name: Extract Timestamp from Ansible Output
        id: extract_timestamp
        run: |
          TIMESTAMP=$(grep -oP 'Generated timestamp: \K.*' ansible_output.log | tr -d '"')
          if [ -z "$TIMESTAMP" ]; then
            echo "No timestamp found in Ansible output!" >&2
            exit 1
          fi
          echo "Extracted timestamp: $TIMESTAMP"
          echo "timestamp=$TIMESTAMP" >> $GITHUB_ENV
          echo "::set-output name=timestamp::$TIMESTAMP"
      
      - name: Debug Sanitized Timestamp
        run: |
          echo "Sanitized timestamp: ${{ env.timestamp }}"

      - name: Use Extracted Timestamp
        run: |
          echo "Using the Ansible-generated timestamp: ${{ env.timestamp }}"
          echo "This timestamp will be reused: ${{ steps.extract_timestamp.outputs.timestamp }}"

      - name: Deploy Containers on Terraform VM
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ needs.terraform_apply.outputs.public_ip }} << EOF
          sudo docker network inspect my-network || sudo docker network create my-network
                    
          # Frontend container
          if sudo docker ps -a --filter "name=frontend-container" --format "{{.Names}}" | grep -q "frontend-container"; then
            sudo docker rm -f frontend-container
          fi
          sudo docker run -d --name frontend-container --network my-network -p 3000:3000 armanlamba/sharks:frontend-v-${{ steps.extract_timestamp.outputs.timestamp }}
          
          # MySQL container
          if sudo docker ps -a --filter "name=mysql-container" --format "{{.Names}}" | grep -q "mysql-container"; then
            sudo docker rm -f mysql-container
          fi
          sudo docker run -d --name mysql-container --network my-network -p 3306:3306 armanlamba/sharks:mysql-v-${{ steps.extract_timestamp.outputs.timestamp }}
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to accept connections..."
          while ! sudo docker exec mysql-container mysqladmin ping -h localhost --silent; do
            echo "MySQL is not ready yet. Retrying in 2 seconds..."
            sleep 2
          done
          echo "MySQL is ready and accepting connections."

          # Backend container
          if sudo docker ps -a --filter "name=backend-container" --format "{{.Names}}" | grep -q "backend-container"; then
            sudo docker rm -f backend-container
          fi
          sudo docker run -d \
            --name backend-container \
            --network my-network \
            -p 3001:3001 \
            -e DB_HOST=mysql-container \
            -e DB_PORT=3306 \
            -e DB_USER=root \
            -e DB_PASSWORD=root \
            -e DB_NAME=urban_connect \
            armanlamba/sharks:backend-v-${{ steps.extract_timestamp.outputs.timestamp }}

          sudo docker ps -a
          EOF
      
      - name: Cleanup Unused Docker Images and Containers
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ needs.terraform_apply.outputs.public_ip }} << EOF
          echo "Cleaning up unused Docker resources..."
          sudo docker system prune -af --volumes
          EOF  
      # sudo docker ps --filter "name=frontend-container" --format "{{.Names}}" | grep -q "frontend-container" || \
      # sudo docker run -d --name frontend-container --network my-network -p 3000:3000 armanlamba/sharks:frontend-v-${{ steps.extract_timestamp.outputs.timestamp }}
      # sudo docker ps --filter "name=mysql-container" --format "{{.Names}}" | grep -q "mysql-container" || \
      # sudo docker run -d --name mysql-container --network my-network -p 3306:3306 armanlamba/sharks:mysql-v-${{ steps.extract_timestamp.outputs.timestamp }}
      # sudo docker ps --filter "name=backend-container" --format "{{.Names}}" | grep -q "backend-container" || \
      # sudo docker run -d --name backend-container --network my-network -p 3001:3001 armanlamba/sharks:backend-v-${{ steps.extract_timestamp.outputs.timestamp }}
      # - name: Verify Running Containers
      #   run: docker ps
